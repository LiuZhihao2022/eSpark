We are trying to solve a task in replenishment domain. In our task, there will be multiple warehouses and each warehouses has their own upstream and downstream.
The last warehouse's upstream is factory, which can provide products and the last warehouse's downstream is consumer, which provide the demand.
Each warehouse can store all type of products with limited capacity.
The goal is to optimize replenishment quantities for each restocking cycle (or time step), balancing inventory to avoid overstocking (causing increasing costs) as well as understocking (causing unmet demands).
Each time step involves the agent making decisions regarding replenishment quantities for SKUs and subsequently transitioning the environment to a new state. Let $M\in\mathbb{Z}^+$ be the total warehouses, with the first one being closest to customers, and $N\in\mathbb{Z}^+$ the total SKUs. Given a variable $X\in\{D,S,L\ldots\}$, $X_{i,j}^t$ represents its value for the $j$-th SKU in the $i$-th echelon at step $t$, with $0\le i<M$ and $0\le j<N$. Given the above notations, the main progression of a step can be described as follows:
\begin{equation*}
\begin{aligned}
    \centering
    & D_{i+1,j}^{t+1} = R_{i,j}^{t} & \text{(Replenish)} \\
    & S_{i,j}^t = \min(D_{i,j}^t, I_{i,j}^t) & \text{(Sell)}\\
    & A_{i,j}^{t} = \sum_{k=0}^{t-1} \mathbb{I}(k+L_{i,j}^k==t) \cdot S_{i+1,j}^t & \text{(Arrive)}\\ 
    & \gamma_i^t = \min\left(\frac{W_i - \sum_{j} I_{i,j}^t}{\sum_{j} A_{i,j}^t}, 1\right), B_{i,j}^t = \lfloor A_{i,j}^t \cdot \gamma_i^t \rfloor & \text{(Receive)} \\
    & I_{i,j}^{t+1} = I_{i,j}^t - S_{i,j}^t + B_{i,j}^t & \text{(Update)}\\
\end{aligned}
\end{equation*}
Here, $D, R, S, I, A, B \in \mathbb{Z}^+$ and $\mathbb{I}(\text{condition})$ is an indicator function that returns 1 if the condition is true, and 0 otherwise.

\begin{itemize}
\item \textbf{Replenish:} Each warehouse requests a replenishment quantity $R$ for each SKU from the upstream source based on the policy, which becomes the demand of the upstream source.
The demand $D$ with $i=0$ comes from consumers, while other demands $D$ with $i>0$ come from replenishment orders of downstream warehouses.
\item \textbf{Sell:} Each warehouse sells the product to the downstream warehouse or consumers to meet their demands as much as possible.
Specifically, the sale quantity $S$ is set to be the demand $D$ capped by the current inventory level $I$. 
% When the inventory $I$ is adequate, the sale quantity $S$ matches the demand $D$; otherwise, it limit purchases to available stock.
\item \textbf{Arrive:} Replenished SKUs arrive after lead time $L$ steps, which may be various. Thus, SKUs replenished at different steps may arrive simultaneously, so the arrival quantity $A$ is the sum of multiple previous replenishment quantities.
\item \textbf{Receive:} Limited warehouse capacity $W$ may prevent storing all arriving SKUs, causing excess cost. The system allows custom acceptance strategies, and we present a built-in uniform receiving strategy in the above equation.
\item \textbf{Update:} The inventory for each SKU is updated after each step.
\end{itemize}


\paragraph{Reward.}
After each step, we calculate the reward generated by each SKU in each warehouse independently using the following formulation:
\begin{equation}  
\text{reward} =  
\underbrace{p \cdot S\strut}_{\text{Selling price}} - 
\underbrace{c \cdot S\strut}_{\text{Procurement cost}} - 
\underbrace{v \cdot (A-B)\strut}_{\text{excess cost}} - 
\underbrace{o \cdot \mathbb{I}(R > 0)\strut}_{\text{Order cost}} - 
\underbrace{h \cdot I\strut}_{\text{Holding cost}} - 
\underbrace{k \cdot (D - S)\strut}_{\text{Backlog cost}}
\end{equation}  
Here $p, c, v, o, h, k \in \mathbb{R}^+$ represent the unit selling price, procurement cost, excess, order cost, holding, and backlog costs, respectively. We omit all subscripts denoting SKU, echelon, and step indices for better readability. Profit can serve as a useful metric for evaluating the effectiveness of a given strategy.

