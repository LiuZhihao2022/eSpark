The output of the exploration function should consist of two items:
    (1) the total mask (1 denote action is not masked and 0 otherwise)
    (2) a dictionary of each individual component mask(the key of dictionary have to be string).
The code output should be formatted as a python code string: "```python ... ```".

Some helpful tips for writing the exploration function code:
    (1) Your total mask and its component should be a 3-D numpy array in [warehouse_name, sku_type, action_mask]. The masks of the actions that are available are set to 1, otherwise 0. No other elements are allowed to appear in total mask.
    (2) If you choose to transform a component mask, then you must also introduce a temperature parameter inside the transformation function; this parameter must be a named variable in the mask function and it must not be an input variable. Each transformed mask component should have its own temperature variable
    (3) Make sure the type of each input variable is correctly specified; For example, a float input variable should not be specified as torch.Tensor
    (4) Since the number of SKUs in each warehouse and action space can be very large, you can use numpy to handle SKUs and actions, to ensure an acceptable time complexity.
    (5) Most importantly, the exploration code's input variables must contain only attributes defined in class AgentStates and class SupplyChain. Under no circumstance can you introduce new input variables. You only need to give the definition of exploration function and no other function or class should be defined.

